require('dotenv').config();
const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');

// Debug th√¥ng s·ªë k·∫øt n·ªëi
console.log('üîß Config:', {
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  database: process.env.DB_NAME
});

const config = {
  host: process.env.DB_HOST,
  port: parseInt(process.env.DB_PORT),
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  connectTimeout: 10000,
  // ƒê√É B·ªé PH·∫¶N SSL
};

const pool = mysql.createPool(config);

const testConnection = async () => {
  let conn;
  try {
    conn = await pool.getConnection();
    const [rows] = await conn.query('SELECT 1+1 AS result');
    console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng! K·∫øt qu·∫£:', rows[0].result);
    return true;
  } catch (err) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi:', err.message);
    console.log('üëâ C·∫ßn ki·ªÉm tra:');
    console.log('1. Password trong .env c√≥ ƒë√∫ng?');
    console.log('2. IP c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c whitelist?');
    console.log('3. Th√¥ng s·ªë host/port:', config.host, config.port);
    return false;
  } finally {
    if (conn) conn.release();
  }
};
// t·∫°o b·∫£ng t·ª´ init.sql
const initializeDatabase = async () => {
  const initScript = fs.readFileSync(
    path.join(__dirname, 'init.sql'), 
    'utf-8'
  );
  
  const conn = await pool.getConnection();
  try {
    // Ch·∫°y t·ª´ng c√¢u l·ªánh SQL
    for (const statement of initScript.split(';')) {
      if (statement.trim()) {
        await conn.query(statement);
      }
    }
    console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng th√†nh c√¥ng');
  } catch (err) {
    console.error('‚ùå L·ªói khi t·∫°o b·∫£ng:', err.message);
    throw err;
  } finally {
    conn.release();
  }
};


module.exports = { pool, testConnection, initializeDatabase };